#include "page.h"
#include <stddef.h>

struct ppage physical_page_array[128]; // 128 pages, each 2mb in length covers 256 megs of memory
struct ppage* free_physical_pages = NULL; //initialize head

void init_pfa_list(void) {
//will initialize the linked list of free pages. It will loop through every element of your statically allocated
//physical page array and link it into the list.

	struct ppage* temp;
	struct ppage* iterator;	
	for (int i=0; i<=128; i++){
		temp=physical_page_array[i];            //set location in array
		temp->physical_addr=physical_page_array[i];
		temp->next=NULL;
		temp->prev=NULL;

		if(free_physical_pages == NULL){
			free_physical_pages=temp;
		}else{
			iterator = allocd_list;         //set iterator at head
        	        while(iterator->next != NULL){  //traverse list
                        iterator= iterator->next;
                }
                iterator->next= temp            //add temp at end

	}

}


struct ppage *allocate_physical_pages(unsigned int npages) {
//allocates one or more physical pages from the list of free pages. The input to this function
//npages specifies the number of pages to allocate. The function will unlink the requested number of pages from the free list
//and create a new separate list. It will return a pointer to the new list (called allocd list in the diagram below).

//THE QUESTION IS HOW TO ASSOCIATE THE SPECIFIC FREE PAGES AND ADDING THOSE TO NEW LIST
//unlink requested number of pages
	for(int i=0; i<npages; i++){

		ppage * tempfree = free_physical_pages;  //store head
		free_physical_pages = free_physical_pages->next; //update head
		//free tempfree
		tempfree->next = NULL;
		tempfree->prev = NULL;		
	}
	

//creating sepperate new list 
	struct ppage* allocd_list = NULL;    //head
	struct ppage* temp = NULL;
	struct ppage* iterator = NULL;

	for (int i=0; i<npages; i++){
		//temp = mallocnode             //how to allocate location within array??
		//temp->physical_addr=
		temp->next=NULL;
		temp->prev=NULL;

		if(allocd_list = NULL){         //if list is empty, establish first node
			allocd_list=temp;
		}else{
		
		iterator = allocd_list;         //set iterator at head
		while(iterator->next != NULL){  //traverse list
			iterator= iterator->next;
		}
		iterator->next= temp;            //add temp at end
	}
	return *allocd_list;
}

void free_physical_pages(struct ppage *ppage_list){
//returns a list of physical pages to the free list. Basically does the opposite of allocate physical pages.

}

